name: test MacOS 13

on:
  push:
    branches:
      - build

jobs:
  Variables:
    name: Set variables
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Get common variables
        id: common_vars
        uses: CumulusDS/get-yaml-paths-action@v1.0.1
        with:
          file: .github/workflows/config/env.test.yml
          var: test
          xcodeVersion: xcode.version
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ steps.common_vars.outputs.xcodeVersion }}
      - name: check OSX version
        run: sw_vers --productVersion
      - name: show Xcode version
        run: echo xcodebuild -version #| grep "Xcode_\d{0,2}(\.\d{1,2})"
      - name: Failed switch Xcode if not equals
        if: ${{ false }} # change to ${{ xcodebuildVersion == steps.common_vars.outputs.xcodeVersion }}
        run: exit 1
  Localization:
    name: Get localization files
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: curl localization files
        run: echo "curl localization files"


  Build:
    name: Build IOS App
    needs:
      - Variables
      - Localization
    runs-on: macos-13
    steps:
      - uses: actions/checkout@master
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ steps.common_vars.outputs.xcodeVersion }}
      - uses: apple-actions/import-codesign-certs@v2
        name: Install the Apple certificate
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          p12-filepath: $RUNNER_TEMP/build_certificate.p12
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          keychain: $RUNNER_TEMP/app-signing.keychain-db
      - uses: nickwph/apple-provisioning-profile-action@v1
        with:
          profile-base64: ${{ secrets.PROVISIONING_PROFILE }}
#      - name: Install the Apple provisioning profile
#        env:
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          PP_PATH=$RUNNER_TEMP/7797000c-b827-4ec8-86f1-766ad285ef45.mobileprovision
#
#          # import certificate and provisioning profile from secrets
#          echo -n $BUILD_PROVISION_PROFILE_BASE64 | base64 --decode -o $PP_PATH
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Check files if exist
        run: cat ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      - name: Check files if exist 2
        run: security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      - name: Build the app
        run: xcodebuild -configuration Release -scheme HelloWorld -archivePath ci-ios-app.xcarchive -sdk iphoneos archive CODE_SIGNING_ALLOWED=No CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER=7797000c-b827-4ec8-86f1-766ad285ef45 | xcpretty && exit ${PIPESTATUS[0]}
      - name: Archieve the app
        run: xcodebuild -exportArchive -archivePath ci-ios-app.xcarchive -exportPath Release -exportOptionsPlist build.plist -allowProvisioningUpdates
      - name: Upload the artifact
        uses: actions/upload-artifact@v3
        with:
          name: Release
          path: ~/work/devops-test-macos13/devops-test-macos13/Release
          if-no-files-found: error