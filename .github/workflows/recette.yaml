name: Recette build IOS App

on:
  push:
    tags:
      - "v*.*.*-recette"
    branches:
      - develop

jobs:
  Variables:
    name: Set variables
    runs-on: macos-13
    strategy:
      matrix:
        environment: [ 'pprd', 'prd' ]
    environment: ${{ matrix.environment }}
    outputs:
      configbuild-prd: ${{ steps.setConfigBuilVar.outputs.configbuild-prd }}
      configbuild-pprd: ${{ steps.setConfigBuilVar.outputs.configbuild-pprd }}
      env-prd: ${{ steps.setEnvVar.outputs.env-prd }}
      env-pprd: ${{ steps.setEnvVar.outputs.env-pprd }}
    steps:
      - uses: actions/checkout@v3
      - name: Change Xcode version
        run: xcversion select ${{ vars.XCODE_VERSION }}
      - name: check OSX version
        run: sw_vers --productVersion
      - name: Set selected Xcode version
        id: selectedXcode
        run: echo "VERSION=$(xcversion selected| grep "Xcode ")" >> $GITHUB_OUTPUT #\d{0,2}(\.\d{1,2}")
      - name: Failed switch Xcode if not equals
        if: ${{ steps.selectedXcode.outputs.version != vars.CHECK_VERSION }} # change to ${{ xcodebuildVersion == steps.varsConfig.outputs.xcodeVersion }}
        run: exit 1
      - name: Set variables configbuild
        id: setConfigBuilVar
#        run: echo "configbuild=${{ vars.CONFIGURATION_BUILD }}" >> $GITHUB_OUTPUT
        run: echo "::set-output name=configbuild-${{ matrix.environment }}::${{ vars.CONFIGURATION_BUILD }}"
      - name: Set env variable
        id: setEnvVar
#        run: echo "env=${{ matrix.environment }}" >> $GITHUB_OUTPUT
        run: echo "::set-output name=env-${{ matrix.environment }}::${{ matrix.environment }}"


  Dump:
    name: Dump step
    runs-on: macos-13
    strategy:
      matrix:
        environment: [ 'pprd', 'prd' ]
    needs:
      - Variables
    steps:
      - uses: actions/checkout@v3
      - name: Dump variables
        run: |
          echo ${{ toJson(needs.Variables.outputs) }}

  Test:
    name: Run test unit
    uses: ./.github/workflows/wc_test.yml
    needs:
      - Variables
    with:
      xcodeversion: ${{ vars.XCODE_VERSION }}
      project_name: ${{ vars.PROJECT_NAME }}

  Build:
    name: Build IOS App
    uses: ./.github/workflows/wc_build.yml
    strategy:
      matrix:
        environment: [ 'pprd', 'prd' ]
    needs:
      - Variables
    with:
      environment: ${{ needs.Variables.outputs.env }}
      xcodeversion: ${{ vars.XCODE_VERSION }} #variable global
      profileName: ${{ vars.PROFILE_NAME }} #variable env
      configBuild: ${{ needs.Variables.outputs.configbuild }}
      projectName: ${{ vars.PROJECT_NAME }}
      plistPath: ${{ vars.PLIST_PATH }}
      xarchivePath: ${{ vars.XARCHIVEPATH }}
    secrets:
      PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
      CERTIFICATES_P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      GH_PAT: ${{ secrets.GH_PAT }}

  Release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build release
    needs:
      - Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: release-${{ needs.Build.outputs.version }}
          path: ~/download/artifact
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          token: ${{ secrets.GH_PAT }}
          name: prerelease-${{ needs.Build.outputs.version }} #Mettre les 5premi√®res lettre et chiffre du SHA du last commit
          files:
            ${{steps.download.outputs.download-path}}/${{ vars.PROJECT_NAME }}.ipa
            ${{steps.download.outputs.download-path}}/${{ vars.PROJECT_NAME }}.app.dSYM