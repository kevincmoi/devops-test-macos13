name: Recette build IOS App

on:
  push:
    tags:
      - "v*.*.*-recette"
    branches:
      - develop
      - add_*

jobs:
  Variables:
    name: Set variables
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Get common variables
        id: varsConfig
        uses: CumulusDS/get-yaml-paths-action@v1.0.1
        with:
          file: ./.github/workflows/config/env.test.yml
          xcodeVersion: xcode.version
          xcodeCheckVersion: xcode.checkVersion
      - name: Change Xcode version
        run: |
          xcversion select ${{ steps.varsConfig.outputs.xcodeVersion }}
      - name: check OSX version
        run: sw_vers --productVersion
      - name: get Xcode version selected
        id: selectedXcode
        run: echo "VERSION=$(xcversion selected| grep "Xcode \d{0,2}(\.\d{1,2}")" >> $GITHUB_OUTPUT
      - name: Failed switch Xcode if not equals
        if: ${{ steps.selectedXcode.outputs.version != steps.varsConfig.outputs.xcodeCheckVersion }} # change to ${{ xcodebuildVersion == steps.varsConfig.outputs.xcodeVersion }}
        run: exit 1

  Localization:
    name: Get localization files
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: curl localization files
        run: echo "curl localization files"

  Test:
    name: Testing IOS App
    runs-on: macos-13
    needs:
      - Variables
      - Localization
    steps:
      - uses: actions/checkout@master
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ steps.varsConfig.outputs.xcodeVersion }}
      - name: Run unit test
        run: |
          xcodebuild clean test -scheme HelloWorld -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.4' | xcpretty && exit ${PIPESTATUS[0]}


  Build:
    if: ${{ false }}
    name: Build IOS App
    needs:
      - Test
    runs-on: macos-13
    steps:
      - uses: actions/checkout@master
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ steps.varsConfig.outputs.xcodeVersion }}
      - name: Install the Apple certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          p12-filepath: $RUNNER_TEMP/build_certificate.p12
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          keychain: $RUNNER_TEMP/app-signing.keychain-db
      - name: Install the Apple provisioning profile
        uses: nickwph/apple-provisioning-profile-action@v1
        with:
          profile-base64: ${{ secrets.PROVISIONING_PROFILE }}
      - name: Check files if exist
        run: cat ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      - name: Check files if exist 2
        run: security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      - name: Build the app
        run: xcodebuild -configuration Release -scheme HelloWorld -archivePath ci-ios-app.xcarchive -sdk iphoneos archive CODE_SIGNING_ALLOWED=No CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER=7797000c-b827-4ec8-86f1-766ad285ef45 | xcpretty && exit ${PIPESTATUS[0]}
      - name: Archieve the app
        run: xcodebuild -exportArchive -archivePath ci-ios-app.xcarchive -exportPath Release -exportOptionsPlist build.plist -allowProvisioningUpdates
      - name: Copy dSYM file
        run: |
          mv ${{ github.workspace }}/ci-ios-app.xcarchive/dSYMs/HelloWorld.app.dSYM \
          ${{ github.workspace }}/Release
      - name: Upload the artifact
        uses: actions/upload-artifact@v3
        with:
          name: Release
          path: ${{ github.workspace }}/Release
          if-no-files-found: error

  Release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build release
    needs:
      - Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: Release
          path: ~/download/artifact
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          token: ${{ secrets.GH_PAT }}
          files:
            ${{steps.download.outputs.download-path}}/HelloWorld.ipa
            ${{steps.download.outputs.download-path}}/HelloWorld.app.dSYM